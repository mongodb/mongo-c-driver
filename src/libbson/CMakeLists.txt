cmake_minimum_required (VERSION 3.15)

project (libbson
   LANGUAGES C
   # Inherit the version from mongo-c-driver
   VERSION "${PROJECT_VERSION}"
   DESCRIPTION "The libbson BSON serialization library"
)

# These values are inherited from the mongo-c-driver parent. These are named as to
# match the CMake variables generated by project().
set(libbson_VERSION_PRERELEASE ${mongo-c-driver_VERSION_PRERELEASE})
set(libbson_VERSION_FULL ${mongo-c-driver_VERSION_FULL})

# In the future we may need to check whether static dependencies are
# available. For now, AUTO means ON.
if (ENABLE_TESTS AND NOT MONGOC_ENABLE_STATIC_BUILD)
   message (FATAL_ERROR
      "-DENABLE_STATIC=OFF and -DENABLE_STATIC_BUILD=OFF also requires -DENABLE_TESTS=OFF"
   )
endif ()

set (BSON_OUTPUT_BASENAME "bson" CACHE STRING "Output bson library base name")

include (CheckFunctionExists)
include (CheckIncludeFile)
include (CheckStructHasMember)
include (CheckSymbolExists)
include (TestBigEndian)
include (InstallRequiredSystemLibraries)
include (CheckIncludeFiles)

# Control over what components are installed:
mongo_bool_setting(
   ENABLE_STATIC_LIBBSON_INSTALL "Install static libbson"
   VISIBLE_IF ENABLE_STATIC)
mongo_bool_setting(
   ENABLE_SHARED_LIBBSON_INSTALL "Install shared libbson"
   VISIBLE_IF ENABLE_SHARED)

set(CMAKE_C_VISIBILITY_PRESET hidden)
set(CMAKE_CXX_VISIBILITY_PRESET hidden)

set (BSON_API_VERSION 1.0)

include (CPack)
TEST_BIG_ENDIAN (BSON_BIG_ENDIAN)

# See https://public.kitware.com/Bug/view.php?id=15659
check_symbol_exists (snprintf stdio.h BSON_HAVE_SNPRINTF)
mongo_bool01 (BSON_HAVE_SNPRINTF BSON_HAVE_SNPRINTF)
check_struct_has_member ("struct timespec" tv_sec time.h BSON_HAVE_TIMESPEC)
mongo_bool01 (BSON_HAVE_TIMESPEC BSON_HAVE_TIMESPEC)
check_symbol_exists (gmtime_r time.h BSON_HAVE_GMTIME_R)
mongo_bool01 (BSON_HAVE_GMTIME_R BSON_HAVE_GMTIME_R)
check_function_exists (rand_r BSON_HAVE_RAND_R)
mongo_bool01 (BSON_HAVE_RAND_R BSON_HAVE_RAND_R)
check_include_file (strings.h BSON_HAVE_STRINGS_H)
mongo_bool01 (BSON_HAVE_STRINGS_H BSON_HAVE_STRINGS_H)
check_symbol_exists (strlcpy string.h BSON_HAVE_STRLCPY)
mongo_bool01 (BSON_HAVE_STRLCPY BSON_HAVE_STRLCPY)
check_include_file (stdbool.h BSON_HAVE_STDBOOL_H)
mongo_bool01 (BSON_HAVE_STDBOOL_H BSON_HAVE_STDBOOL_H)
check_symbol_exists (clock_gettime time.h BSON_HAVE_CLOCK_GETTIME)
mongo_bool01 (BSON_HAVE_CLOCK_GETTIME BSON_HAVE_CLOCK_GETTIME)
check_symbol_exists (strnlen string.h BSON_HAVE_STRNLEN)
mongo_bool01 (BSON_HAVE_STRNLEN BSON_HAVE_STRNLEN)

if (WIN32)
   set (BSON_OS 2)
else ()
   set (BSON_OS 1)
endif ()

if (BSON_BIG_ENDIAN)
   set (BSON_BYTE_ORDER 4321)
else ()
   set (BSON_BYTE_ORDER 1234)
endif ()

configure_file (
   "${PROJECT_SOURCE_DIR}/src/bson/bson-config.h.in"
   "${PROJECT_BINARY_DIR}/src/bson/bson-config.h"
)

configure_file (
   "${PROJECT_SOURCE_DIR}/src/bson/bson-version.h.in"
   "${PROJECT_BINARY_DIR}/src/bson/bson-version.h"
)

if (ENABLE_APPLE_FRAMEWORK)
   configure_file (
      "${PROJECT_SOURCE_DIR}/src/bson/modules/module.modulemap.in"
      "${PROJECT_BINARY_DIR}/src/bson/modules/module.modulemap"
   )
endif ()


if (APPLE)
   cmake_policy (SET CMP0042 OLD)
endif ()

# Base INTERFACE library propagates in-build-tree requirements for using libbson
add_library(_libbson_build_interface INTERFACE)
# Header directories required for libbson in-source
target_include_directories(_libbson_build_interface INTERFACE
   # The default src/
   src/
   # The generated src/
   ${PROJECT_BINARY_DIR}/src/
   # The source directories of the common lib:
   ${mongo-c-driver_SOURCE_DIR}/src/common/
   # Generated:
   ${mongo-c-driver_BINARY_DIR}/src/common/
   )
target_link_libraries(_libbson_build_interface INTERFACE mongo::detail::c_platform)

# Collect all source files
file(GLOB_RECURSE all_sources CONFIGURE_DEPENDS
   src/*.c src/*.h
   # Include common library source files within libbson itself (names
   # will be mangled with MCOMMON_NAME_PREFIX)
   "${mongo-c-driver_SOURCE_DIR}/src/common/*.c"
   )

# The default object library for all libbson translation units:
add_library(bson_obj OBJECT EXCLUDE_FROM_ALL ${all_sources})

# The libbson object libraries that we will build
set(bson_obj_libs bson_obj)

if(ENABLE_PIC OR WIN32)
   # User wants (or platform requires) static libs to use PIC code. Since we
   # already need PIC for the dynamic library, we can consolidate things and
   # use a single object library for both the static and the shared library.
   # No duplicate compilations necessary!
   set_property(TARGET bson_obj PROPERTY POSITION_INDEPENDENT_CODE TRUE)
   # The bson_obj_pic is just an alias of the base library:
   add_library(bson_obj_pic ALIAS bson_obj)
else()
   # User does not want PIC in the static library. In that case, we just need a second object
   # library that has PIC enabled so it can be used in creating the dynamic library.
   add_library(bson_obj_pic OBJECT EXCLUDE_FROM_ALL ${all_sources})
   set_property(TARGET bson_obj_pic PROPERTY POSITION_INDEPENDENT_CODE TRUE)
   list(APPEND bson_obj_libs bson_obj_pic)
endif()

# Set target properties for the object libraries.
mongo_target_requirements(
   ${bson_obj_libs}
   LINK_LIBRARIES
      PUBLIC
         _libbson_build_interface
   COMPILE_DEFINITIONS
      PRIVATE
         # Tell headers that they are part of compilation:
         BSON_COMPILATION
         # Enable NaN parsing in jsonsl
         JSONSL_PARSE_NAN
         # Set the name mangling scheme for the common libraries
         MCOMMON_NAME_PREFIX=_bson_mcommon
   COMPILE_OPTIONS
      PRIVATE
         # Macro constant INFINITY triggers constant arithmetic overflow warnings in
         # VS 2013, but VS 2013 doesn't support inline warning suppression.
         # Remove once support for VS 2013 is dropped.
         $<$<AND:$<C_COMPILER_ID:MSVC>,$<VERSION_LESS:${MSVC_VERSION},1900>>:/wd4756>
)

# List of the primary BSON library targets that we are building
set(bson_libs)

if(ENABLE_STATIC)
   add_library(bson_static STATIC)
   target_link_libraries(bson_static PRIVATE $<BUILD_INTERFACE:bson_obj>)
   list(APPEND bson_libs bson_static)
endif()

if(ENABLE_SHARED)
   add_library(bson_shared SHARED)
   target_link_libraries(bson_shared PRIVATE $<BUILD_INTERFACE:bson_obj_pic>)
   list(APPEND bson_libs bson_shared)
endif()

if(NOT bson_libs)
   message(FATAL_ERROR "Neither bson_shared nor bson_static is going to be built. Did you mean to enable at least one of them?")
endif()

mongo_target_requirements(
   ${bson_libs} LINK_LIBRARIES PUBLIC
   # Build-local requirements:
   $<BUILD_INTERFACE:_libbson_build_interface>
   # Include in the install interface explicitly:
   mongo::detail::c_platform
)
set_target_properties(${bson_libs} PROPERTIES
   VERSION "0.0.0"
   SOVERSION "0"
   OUTPUT_NAME "${BSON_OUTPUT_BASENAME}-${BSON_API_VERSION}"
)
if(TARGET bson_static)
   set_property(TARGET bson_static PROPERTY OUTPUT_NAME "${BSON_OUTPUT_BASENAME}-static-${BSON_API_VERSION}")
endif()

if (ENABLE_APPLE_FRAMEWORK)
   set_target_properties(bson_shared PROPERTIES
      FRAMEWORK TRUE
      MACOSX_FRAMEWORK_BUNDLE_VERSION ${MONGOC_VERSION}
      MACOSX_FRAMEWORK_SHORT_VERSION_STRING ${MONGOC_VERSION}
      MACOSX_FRAMEWORK_IDENTIFIER org.mongodb.bson
      OUTPUT_NAME "${BSON_OUTPUT_BASENAME}"
      PUBLIC_HEADER "${HEADERS}"
   )
endif ()


function (add_example bin src)
   set (BSON_EXAMPLE_SOURCES ${PROJECT_SOURCE_DIR}/${src})
   add_executable (${bin} ${BSON_EXAMPLE_SOURCES})

   # Link against the shared lib like normal apps
   if(TARGET bson_shared)
      target_link_libraries (${bin} bson_shared)
   elseif(TARGET bson_static)
      target_link_libraries (${bin} bson_static)
   else()
      return()
   endif()
endfunction ()

if (ENABLE_EXAMPLES)
   add_example (bcon-col-view examples/bcon-col-view.c)
   add_example (bcon-speed examples/bcon-speed.c)
   add_example (bson-metrics examples/bson-metrics.c)
   if (NOT WIN32)
      target_link_libraries (bson-metrics m)
      add_example (bson-streaming-reader examples/bson-streaming-reader.c)
   endif ()
   add_example (bson-to-json examples/bson-to-json.c)
   add_example (bson-validate examples/bson-validate.c)
   add_example (json-to-bson examples/json-to-bson.c)
   add_example (bson-check-depth examples/bson-check-depth.c)
   add_example (creating examples/creating.c)
endif () # ENABLE_EXAMPLES

set (BSON_HEADER_INSTALL_DIR
   "${CMAKE_INSTALL_INCLUDEDIR}/libbson-${BSON_API_VERSION}"
)
function(install_export_target target)
   set_property(TARGET ${target} APPEND PROPERTY pkg_config_INCLUDE_DIRECTORIES "${BSON_HEADER_INSTALL_DIR}")
   install(
      TARGETS "${target}"
      EXPORT "${target}-targets"
      LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
      ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
      RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
      INCLUDES DESTINATION "${BSON_HEADER_INSTALL_DIR}"
      FRAMEWORK DESTINATION "${CMAKE_INSTALL_BINDIR}"
   )
   install(
      EXPORT "${target}-targets"
      NAMESPACE mongo::
      FILE "${target}-targets.cmake"
      DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/bson-${BSON_API_VERSION}"
   )
endfunction()

set(installed_targets)
if(ENABLE_STATIC_LIBBSON_INSTALL AND TARGET bson_static)
   install_export_target(bson_static)
   list(APPEND installed_targets bson_static)
   mongo_generate_pkg_config(bson_static FILENAME libbson-static-1.0.pc INSTALL)
endif()
if(ENABLE_SHARED_LIBBSON_INSTALL AND TARGET bson_shared)
   install_export_target(bson_shared)
   list(APPEND installed_targets bson_shared)
   mongo_generate_pkg_config (bson_shared FILENAME libbson-1.0.pc INSTALL)
endif()


install(
   DIRECTORY
      # Trailing "/" requests directory contents, not the dir itself:
      src/bson/
      ${PROJECT_BINARY_DIR}/src/bson/
   DESTINATION "${BSON_HEADER_INSTALL_DIR}/bson"
   FILES_MATCHING
      PATTERN "*.h"
      PATTERN "*-private.h" EXCLUDE
      PATTERN "forwarding" EXCLUDE
      PATTERN "modules" EXCLUDE
   )
install(FILES src/bson/forwarding/bson.h DESTINATION "${BSON_HEADER_INSTALL_DIR}")

if (ENABLE_APPLE_FRAMEWORK)
   install (
      FILES "${PROJECT_BINARY_DIR}/src/bson/modules/module.modulemap"
      DESTINATION "${CMAKE_INSTALL_BINDIR}/bson.framework/Modules/"
   )
endif ()

include (CMakePackageConfigHelpers)

write_basic_package_version_file (
   "${CMAKE_CURRENT_BINARY_DIR}/bson/bson-${BSON_API_VERSION}-config-version.cmake"
   VERSION ${BSON_VERSION}
   COMPATIBILITY AnyNewerVersion
)

export (EXPORT bson-targets
   NAMESPACE mongo::
   FILE "${CMAKE_CURRENT_BINARY_DIR}/bson/bson-targets.cmake"
)

configure_file (src/bson-config.cmake
   "${CMAKE_CURRENT_BINARY_DIR}/bson/bson-${BSON_API_VERSION}-config.cmake"
   COPYONLY
)

install (EXPORT bson-targets
   NAMESPACE mongo::
   FILE bson-targets.cmake
   DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/bson-${BSON_API_VERSION}
)

install (
   FILES
      "${CMAKE_CURRENT_BINARY_DIR}/bson/bson-${BSON_API_VERSION}-config.cmake"
      "${CMAKE_CURRENT_BINARY_DIR}/bson/bson-${BSON_API_VERSION}-config-version.cmake"
   DESTINATION
      ${CMAKE_INSTALL_LIBDIR}/cmake/bson-${BSON_API_VERSION}
   COMPONENT
      Devel
)

include (LegacyPackage)

if (ENABLE_MAN_PAGES STREQUAL ON OR ENABLE_HTML_DOCS STREQUAL ON)
   find_package (Sphinx REQUIRED)
   add_subdirectory (doc)
   add_custom_target (bson-doc
      ALL
      DEPENDS
      $<$<STREQUAL:"${ENABLE_MAN_PAGES}","ON">:bson-man>
      $<$<STREQUAL:"${ENABLE_HTML_DOCS}","ON">:bson-html>
   )
endif ()
